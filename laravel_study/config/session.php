<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | 此选项控制将在以下位置使用的默认会话“驱动程序”
    | 要求。 默认情况下，我们将使用轻量级本机驱动程序，但
    | 您可以指定此处提供的其他任何出色的驱动程序。
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | 您可以在此处指定您希望会议进行的分钟数
    | 被允许在其过期之前保持空闲状态。 如果你想要他们
    | 要立即在浏览器关闭时到期，请设置该选项。
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | 此选项使您可以轻松地指定所有会话数据
    | 在存储之前应先加密。 所有加密将运行
    | Laravel自动执行，您可以像平常一样使用Session。
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | 使用本机会话驱动程序时，我们需要一个会话所在的位置
    | 文件可能会被存储。 已为您设置了默认值，但不同
    | 可以指定位置。 只有文件会话才需要。
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | 使用“数据库”或“ redis”会话驱动程序时，可以指定一个
    | 用于管理这些会话的连接。 这应该
    | 对应于数据库配置选项中的连接。
    |
    */

    'connection' => env('SESSION_CONNECTION', null),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | 使用“数据库”会话驱动程序时，您可以指定表
    | 应该用于管理会话。 当然，明智的默认方法是
    | 为您提供； 但是，您可以根据需要随意更改。
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | 使用“ apc”，“ memcached”或“ dynamodb”会话驱动程序时，
    | 列出应用于这些会话的缓存存储。 这个值
    | 必须与应用程序配置的缓存“存储”之一匹配。
    |
    */

    'store' => env('SESSION_STORE', null),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | 一些会话驱动程序必须手动清除其存储位置才能获取
    | 摆脱存储中的旧会话。 这里有机会
    | 发生在给定的请求上。 默认情况下，赔率是100分之2。
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | 在这里，您可以更改用于标识会话的Cookie的名称
    | ID实例。 此处指定的名称将在每次
    | 框架为每个驱动程序创建新的会话cookie。
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | 会话Cookie路径确定Cookie的路径
    | 被视为可用。 通常，这将是
    | 您的应用程序，但是您可以在必要时随意更改。
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | 您可以在此处更改用于标识会话的Cookie的域
    | 在您的应用程序中。 这将确定cookie是哪个域
    | 在您的应用程序中可用。 设置了明智的默认设置。
    |
    */

    'domain' => env('SESSION_DOMAIN', null),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | 通过将此选项设置为true，会话cookie将仅被发送回
    | 如果浏览器具有HTTPS连接，则连接到服务器。 这将保持
    | 如果无法安全完成cookie，则不会发送给您。
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE', false),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | 将此值设置为true将阻止JavaScript访问
    | Cookie的值，并且该Cookie仅可通过以下方式访问
    | HTTP协议。 如果需要，您可以随意修改此选项。
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | 此选项确定跨站点请求时Cookie的行为
    | 发生，并且可以用来减轻CSRF攻击。 默认情况下，我们
    | 请不要启用此功能，因为已经有其他CSRF保护服务。
    |
    | Supported: "lax", "strict"
    |
    */

    'same_site' => null,

];
